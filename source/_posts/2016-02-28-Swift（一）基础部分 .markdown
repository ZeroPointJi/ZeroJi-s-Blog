---
title:  "Switf（一）基础部分"
date:   2016-02-26 15:00:23
categories: 
- iOS
tags: 
- Swift
---
## 常量和变量

常量用let来声明，变量用var来声明

```swift
let maximumNumberOfLoginAttempts = 10
var currentLoginAttempt = 0
```

可以在一行中声明多个常量或者多个变量，用逗号隔开

```swift
var x = 0.0, y = 0.0, z = 0.0
```

> 如果你的代码中有不需要改变的值，请使用`let`关键字将它声明为常量。只将需要改变的值声明为变量。

## 类型标注

声明常量或者变量的时候可以加上类型标注，说明常量或者变量中要储存的值的类型。

```swift
var welcomeMessage: String // String是类型名称
```

`welcomeMessage`变量现在可以被设置成任意字符串

```swift
welcomeMessage = "Hello"
```

同理，也可以在一行中定义多个同样类型的变量，用逗号分割，病在最后一个变量名之后添加类型标注

```swift
var red, green, blue: Double
```

> 一般我们很少给常量或者变量加类型标注。Swift会根据在初始值推断变量或者常量的类型。

## 常量和变量的命名

可以使用任何字符作为常量和变量名

```swift
let π = 3.14159
let 你好 = "你好世界"
let 🐶🐮 = "dogcow"
```

命名不能以数字开头，且不能包含数学符号，箭头，保留的Unicode码位，连线与制表符。

> 如果要以与Swift保留关键字相同的名称命名，可以使用反引号(`)将关键字包围的方式。除非别无选择，否则不应该以系统保留关键字命名。

## 输出常量和变量

可以使用`print()`来输出

```swift
print(welcomeMessage)
```

也可以把`welcomeMessage`的值输出

```swift
print("welcomeMessage = \(welcomeMessage)")
```

在这里提一个不方便的地方，就是当在`print()`中使用变量值的时候，代码不能自动补全。

## 分号

Swift不强制使用分号结尾，使用分号可以，不使用也可以，视个人习惯而定。有一种情况例外，就是当一行中有多个独立语句的时候，需要用分号隔开

```swift
let cat = "cat";print(cat)
```

## 整数

Swift提供了很多范围不同的整数，如`Int8`，`Int16`，`Int32`，`Int64`等。如果在整数类型前面加`U`，意味这此整数类型为无符号整型，如`UInt8`。

Swift中提供了获取整数最大值和最小值的函数

```swift
let minValue = UInt8.min
ket maxValue = Uint8.max
```

> 一般来说，不需要专门指定整数的长度。Swift提供了两个特殊的整数类型`Int`、`UInt`，长度与当前平台的原生字长相同。为了代码的可读性和可重复性考虑，统一使用`Int`较好。

## 浮点数

Swift提供了两个有符号的浮点数类型

 - `Double`表示64位浮点数。
 - `Float`表示32位浮点数。

> `Double`精度很高，可以精确到小数点后15位数字。`Float`只有6位数字。

## 类型安全和类型推断

Swift是一个*类型安全的语言*。类型安全的语言可以让你清楚地知道代码要处理的值的类型。
由于Swift是类型安全的，所以它会在编译你的代码时进行*类型检查*，并把不匹配的类型标记为错误。
当要处理不同类型的值时，类型检查可以帮助避免错误。然而，并不是说每次声明常量和变量的时候都需要显式指定类型。如果没有显式指定类型，Swift会使用*类型推断*来选择合适的类型。有了类型推断，编译器可以在编译代码的时候自动推断出表达式的类型。原理很简单，只要检查赋的值即可。
声明常量或者变量并赋初值的时候类型推断非常有用。当在声明常量或者变量的时候赋给它们一个字面量，即可出发类型推断。

```swift
let meaningOfLife = 42 // meaningOfLife 会被推断为Int类型
let pi = 3.14159 // pi 会被推测为Double类型
let anotherPi = 3 + 0.14159 // anotherPi 会被推测为Double类型
```

原始值`3`没有显式声明类型，而表达式中出现了一个浮点字面量，所以表达式会被推断为`Double`类型。

## 数值型字面量

整数字面量可以被写作

 - 一个*十进制数*，没有前缀
 - 一个*二进制数*，前缀是`0b`
 - 一个*八进制数*，前缀是`0o`
 - 一个*十六进制数*，前缀是`0x`

下面的所有整数字面量的十进制值都是`17`

```swift
let decimalInteger = 17
let binaryInteger = 0b1001 // 二进制
let octalInteger = 0o21 // 八进制
let hexadecimalInteger = 0x11 // 十六进制
```

浮点字面量可以是十进制（没有前缀）或者是十六进制（前缀是`0x`）。小数点两边必须有至少一个十进制数字（或者是十六进制的数字）。十进制浮点数也可以有一个可选的指数（exponent)，通过大写或者小写的`e`来指定；十六进制浮点数必须有一个指数，通过大写或者小写的`p`来指定。

如果一个十进制数的指数为`exp`，那这个数相当于基数和10^exp的乘积：

- `1.25e2` 表示 1.25 × 10^2，等于 125.0。
- `1.25e-2` 表示 1.25 × 10^-2，等于 0.0125。

如果一个十六进制数的指数为`exp`，那这个数相当于基数和2^exp的乘积：

- `0xFp2` 表示 15 × 2^2，等于 60.0。
- `0xFp-2` 表示 15 × 2^-2，等于 3.75。

下面的所有浮点字面量都等于十进制的`12.1875`

```swift
let decimalDouble = 12.1875
let exponentDouble = 1.21875e1
let hexadecimalDouble = 0xC.3p0
```

数值类字面量可以包括额外的格式来增强可读性。

```swift
let paddedDboule = 000123.456
let oneMillion = 1_000_000
let justOverOneMillion = 1_000_000.000_000_1
```

## 整数转换

要将一种数字类型转换成另一种，你要用当前值来初始化一个期望类型的新数字，这个数字的类型就是你的目标类型。

```swift
let twoThousand: UInt16 = 2_000
let one: UInt8 = 1
let twoThousandAndOne = twoThousand + UInt16(one)
```

现在两个类型都为`UInt16`，可以进行相加。目标常量`twoThousandAndOne`的类型被推断为`UInt16`。

`SomeType(ofInitialValue)`是调用Swift构造器并传入一个初始值的默认方法。

## 整数和浮点数转换

整数和浮点数的转换必须显式指定类型

```swift
let three = 3
let pointOneFourOneFiveNine = 0.14159
let newPi = Double(three) + pointOneFourOneFiveNine // newPi 等于 3.14159，所以被推测为 Double 类型
```

浮点数到整数的反向转换同样行，整数类型可以用`Double`或者`Float`类型来初始化

```swift
let integerPi = Int(newPi) // integerPi 等于3，所以被推测为 Int 类型
```

> 字面量`3`可以直接和字面量`0.14159`相加，因为数字字面量本身没有明确的类型。

## 类型别名

类型别名就是给现有类型定义另一个名字。可以使用`typealias`关键字来定义类型别名。

```swift
typealias AudioSample = UInt16
```

定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名

```swift
var maxAmplitudeFound = AudioSample.min // AudioSample.min 等同于 UInt16.min
```

## 布尔值

Swift有一个基本布尔类型，交错`Bool`。布尔值只能是真或假（`true`和`false`）

```swift
let orangesAreOrange = true
let turnipsAreDelicious = false
```

`orangesAreOrange`和`turnipsAreDelicious`的类型会被推断为Bool。

当便携条件语句，比如`if`语句的时候，布尔值很有用

```swift
if turnipsAreDelicious {
    print("Mmm, tasty turnips!")
} else {
    print("Eww, turnips are horrible.")
}
```

如果在需要使用`Bool`类型的地方使用了非布尔值，Swift就会报错

```swift
let i = 1
if i {
    // 这个例子不会通过编译，会报错
}
```

然而下面这个语句是合法的

```swift
if i == 1 {
    //这个例子会编译成功
}
```

`i == 1`的返回类型为布尔值，所以编译能成功。

## 元组

*元组*把多个值合成一个复合值。元组内可以是任意类型，并且可以不同。

```swift
let http404Error = (404, "Not Found") // http404Error 的类型是 (Int, String)，值是 (404, "Not Found")
```

`(404, "Not Fount")`把一个`Int`值和一个`String`值组合起来表示HTTP状态码的两个部分：一个数字和一个可读的描述。

可以把一个元组的内容分解成单独的常量和变量

```swift
let (statusCode, statusMessage) = http404Error // 分解元组
print("The status code is \(statusCode)")
print("The status message is \(statusMessage)")
``` 

如果只需要一部分元组值，分解的时候可以把要忽略的部分用下划线(`_`)标记

```swift
print("The status code is \(statusCode)")
print("The status message is \(statusMessage)")
```

还可以通过下标来访问元组中的元素

```swift
printprint("The status code is \(http404Error.0)")
print("The status message is \(http404Error.1)")
```

可以在定义元组的时候给元素命名，之后可以通过名字来获取元素

```swift
let http200Status = (statusCode: 200, description: "OK")
print("The status code is \(http200Status.statusCode)")
print("The status message is \(http200Status.description)")
```

作为函数返回值时，元组很有用。

> 元组在临时组织值的时候很有用，但是不太适合创建复杂的数据结构。

## 可选类型

使用*可选类型*来处理值可能缺失的情况。可选类型有两种情况

- 有值，等于某个值
- 无值，等于nil

Swift有一种构造器，多用是将一个`String`值转换为一个`Int`值。并不是所有字符串都可以转换为整数。字符串`"123"`可以被转换为整数`123`，`"zero"`不行。

```swift
let possibleNumber = "123"
let convertedNumber = Int(possibleNumber) // convertedNumber 被推测为类型"Int?"，或者类型"optional Int"
```

因为该构造器可能会失败，所以它返回一个*可选类型*`Int`，而不是`Int`

`nil`类型只能用于给`type?`类型的常量或者变量赋值

```swift
var serverResponseCode: Int? = 404
serverResponseCode = nil
```

如果声明了一个可选常量或者变量但是没有赋值，它们会自动被设置为`nil`

```swift
var survetAnswer: String?// surveyAnswer 被自动设置为 nil
```

> 在OC中，`nil`是一个指向不存在对象的指针。在Swift中，`nil`不是指针，它是一个确定的值，用来表示值缺失。任何类型的可选状态都可以被设置为`nil`，不只是对象类型。

## if语句以及强行解析

你可以使用`if`语句和`nil`语句来判断一个可选值是否包含值。

```swift
if convertedNumber != nil {
    print("convertedNumber contains some integer value.")
}
```

当确定可选类型确实包含值之后，可以在可选的名字后面加一个感叹号(`!`)来获取值。感叹号代表”我知道这个可选类型的值有值，请使用它“，这被称为可选值的*强制解析*

```swift
if convertedNumber != nil {
    print("convertedNumber has an integer value of \(convertedNumber!).")
}
```

## 可选绑定

使用*可选绑定*来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。

```swift
if let actualNumber = Int(possibleNumber) {
    print("\'\(possibleNumber)\' has an integer value of \(actualNumber)")
} else {
    print("\'\(possibleNumber)\' could not be converted to an integer")
}
```

可以包含多个可选绑定在`if`语句中，并使用`where`子句做布尔值判断。

```swift
if let firstNumber = Int("4"), secondNumber = Int("42") where firstNumber < secondNumber {
    print("\(firstNumber) < \(secondNumber)")
}
```

## 隐形可选类型

有时候在程序架构中，第一次被赋值之后，可以确定一个可选类型_总会_有值。在这种情况下，每次都要判断和解析可选值是非常低效的，因为可以确定它总会有值。

这种类型的可选状态被定义为隐式解析可选类型。把想要用作可选的类型的后面的问号(`String?`)改成感叹号(`String!`)来声明一个隐式解析可选类型。

一个隐式解析可选类型其实就是一个普通的可选类型，但是可以被当作非可选类型来使用，并不需要每次都使用解析来获取可选值。

```swift
let possibleString: String? = "An optional string."
let forcedString: String = possibleString! // 需要惊叹号来获取值

let assumedString: String! = "An implicitly unwrapped optional string."
let implicitString: String = assumedString  // 不需要感叹号
```

可以把隐式解析可选类型当做一个可以自动解析的可选类型。你要做的只是声明的时候把感叹号放到类型的结尾，而不是每次取值的可选名字的结尾。

> 如果在隐式可选类型没有值的时候尝试取值，会触发运行错误。

可以把隐式解析可选类型当作普通可选类型来判断它是否包含值，也可以在可选绑定中使用它来检查并解析它的值。

```swift
if assumedString != nil {
    print(assumedString)
}

if let definiteString = assumedString {
    print(definiteString)
}
```

> 如果一个变量之后可能变成`nil`的话请不要使用隐式解析可选类型。

## 错误处理

可以使用*错误处理*来应对程序执行中可能会遇到的错误条件。

一个函数可以通过在声明中添加`throws`关键词来抛出错误消息。当抛出错误消息时，应该在表达式中前置`try`关键词

```swift
func canThrowAnError() throws {
    // 这个函数可能抛出错误
}

do {
    try canThrowAnError() // 没有错误信息抛出
} catch {
    // 有一个错误信息抛出
}
```

一个`do`语句创建了一个新的包含作用域，使得错误能被传播到一个或者多个`catch`从句。

## 断言

可选类型可以判断值是否存在，可以在代码中处理值缺失的情况。然而，在某些情况下，如果值缺失或者值并不满足特定的条件，代码可能没办法继续执行。这时，可以在代码中触发一个*断言*来结束代码运行并通过调试来找到值的缺失的原因。

断言会在运行时判断一个逻辑条件是否为`true`。如果为`true`继续进行代码，如果为`false`，代码执行结束，应用终止。

使用全局`assert(_:_file:line:)函数来写一个断言。

```swift
let age = -3
assert(age >= 0, "A person's age connot be less than zero") // 因为 age < 0，所以断言会触发
```

如果不需要断言信息，可以省略

```swift
assert(age >= 0)
```

> 当代码使用优化编译的时候，断言将会被禁用，例如在 Xcode 中，使用默认的 target Release 配置选项来 build 时，断言会被禁用。

---

本次学习全程参考[Swift教程](http://wiki.jikexueyuan.com/project/swift/chapter2/01_The_Basics.html)
