---
title:  "iOS进阶（八）多线程"
date:   2016-03-08 18:30:00 +8:00
categories: 
  - iOS
tags: 
  - Objective-C
---
## 多线程概念

程序：由源代码生成的课执行应用。

进程：一个正在晕的程序可以看做一个进程。

线程：程序中独立运行的代码段。

一个线程是由一个或多个线程组成的。进程值负责资源的调度和分配，线程才是程序真正的执行单元，负责代码的执行。

单线程：

- 每个正在运行的程序，至少包括一个线程，这个线程叫主线程。
- 主线程在程序启动时被创建，用于执行`main`函数。
- 只有一个主线程的程序，称作单线程程序。
- 在单线程程序程序中，主线程负责执行程序的所有的代码。这些代码只能顺序执行，无法并发执行。

多线程：

- 拥有多个线程的程序，称作多线程程序。
- `iOS`允许用户自己开辟新的线程，相对于主线程来将，这些线程，称作子线程。
- 可以根据需要开辟若干子线程。
- 子线程和主线程都是独立的运行单元，各自的执行互不影响，因此能够并发执行。

## NSThread实现多线程

```objc
    // NSThread 有两种多线程的写法，一种手动去开辟，一种自动去开辟

    // 第一个参数为执行方法的对象，第二个参数新线程中绑定的方法 也就是我们需要处理的耗时操作，第三个参数 执行的方法中带的参数 如果不写 方法没有参数。
    NSThread *thread = [[NSThread alloc] initWithTarget:self selector:@selector(printNumber:) object:@12345];
    // 如果采用这个方法来创建对象，则不需要我们手动开启start方法执行线程，但是取消线程还是要我们自己去执行方法。
    //[NSThread detachNewThreadSelector:@selector(printNumber:) toTarget:self withObject:@12345];
    // 设定线程名称
    thread.name = @"计算线程";
    // 如果单独创建出一个线程对象，想让线程开启，并且执行任务，需要手动执行start方法
    [thread start];
```

`printNumber`方法

```objc
- (void)printNumber:(NSNumber *)number
{
    NSLog(@"%@, %d", [NSThread currentThread], [NSThread isMainThread]);
    // 为了保证在线程中对象的及时释放等操作顺利完成，每一个线程对象，都会绑定一个此线程的自动释放池。
    @autoreleasepool {
        for (int i = 0; i < [number intValue]; i++) {
            NSLog(@"%d", i);
        }
    }
    // 结束线程可以使用以下两种方式
    // 方式一
    // 当耗时操作完成之后，我们将线程对象取消
    [[NSThread currentThread] cancel];
    // 方式二
    // 当耗时操作完成之后，我们将退出线程
    [NSThread exit];
    //NSLog(@"%d", [[NSThread currentThread] isExecuting]);
}
```

每个线程都维护着与自己相对应的`NSAutoreleasePool`对象，将其放在线程栈顶。当线程结束时，会清空自动释放池。

为保证对象的及时释放，在多线程方法中需要添加自动释放池。

在应用程序打开的时候，系统会自动为主线程创建一个自动释放池。

我们手动创建的子线程需要我们手动添加自动释放池。

## NSObject实现异步后台执行

其实只要一行代码。

```objc
[self performSelectorInBackground:@selector(downloadImage) withObject:nil];
```

## NSOperation队列执行任务

`NSOperation`类，在`MVC`中属于`M`，是用来封装单个任务相关的代码和数据的抽象类。

因为它是抽象的，不能直接使用这个类，而是使用子类（`NSInvocationOperation`或`NSBlockOperation`）来执行实际任务。

`NSOperation`（含子类），只是一个操作，本身无主线程、子线程之分，课在任意线程中使用。通常与`NSOperationQueue`结合使用。

使用`NSInvocationOperation`

```objc
    NSInvocationOperation *op1 = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(downloadImage) object:nil];
    // 操作需要添加到操作队列里面，操作队列就会自动开辟子线程来执行任务。
    // 操作队列只需要添加操作进来，至于开辟多少个子线程不需要我们管，什么时候回收也不需要我们管。但是需要我们人为的创建操作，并且需要创建队列。
    NSOperationQueue *queue = [[NSOperationQueue alloc] init];
    [queue addOperation:op1];
```

使用`NSBlockOperation`

```objc
    NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^{
         NSLog(@"%@------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    }];
    [queue addOperation:op2];
```

`NSOperationQueue`操作队列：

- `NSOperationQueue`是操作队列，它用来管理一组`Operation`对象的执行，会根据需要自动为`Operation`开辟合适数量的线程，以完成任务的并行执行。
- 其中`SOperation`可以调节它在队列中得优先级（使用`addDependency`:设置依赖关系）
- 当最大并发数量设置为`1`的时候，能实现线程同步。

## GCD使用

GCD简介：

- `Grand Central Dispatch`(GCD)是`Apple`开发的一种多核变成技术。主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。
- `GCD`提供函数实现多线程开发，性能更高，功能也更加强大。

GCD核心概念：

- 任务：具有一定功能的代码段。
- 分发队列：`GCD`以队列的方式进行工作，`FIFO`。
- `GCD`会根据分发队列的类型，创建合适数量的线程执行队列中的任务。

GCD中两种队列：

- `SerialQueue`：一次只执行一个任务。`Serial queue`通常用于同步访问特定的资源或数据。
- `Concurrent`：可以并发地执行多个任务，但是遵守`FIFO`。

同步异步:

- 同步：不具备开启子线程的能力。
- 异步：具备开启子线程的能力。

串行并发队列：

- 串行队列：任务执行方式为一个接一个在同一个线程中执行，只有当前一个任务完成之后才能执行下一个任务。
- 并发队列：任务的执行方式为同时执行在不同的线程中，多个任务不需要等待。

异步、并发，最常用，开启多条子线程，任务是并发执行的。

```objc
- (void)asynGlobal
{
    // 获取全局的并发队列
    // 第一个参数代表队列优先级，如果优先级高，那么这个队列调动的次数就会多一点。通常情况下，这个优先级给默认优先级。
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    // 将任务添加到并发队列里面异步执行。
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱1年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱2年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱3年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱4年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱5年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    
    // 如果是mrc，队列使用完毕之后需要释放队列。
    //dispatch_release(queue);
}
```

异步、串行，有时会用，开启一条子线程，任务在开启的线程中，一个一个的执行。

```objc
- (void)asynSerial
{
    // 创建一个串行队列
    dispatch_queue_t queue = dispatch_queue_create("com.zero.www", DISPATCH_QUEUE_SERIAL);
    // 将任务添加到串行队列中异步执行。
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱1年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱2年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱3年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱4年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_async(queue, ^{
        NSLog(@"%@---------谈恋爱5年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
}
```

同步、并发，基本不同。如果是同步，在不开启子线程的情况下，并发的效果已经消失了。在我看来就是一个傻逼方法。。。

```objc
- (void)synGlobal
{
    // 获取全局的并发队列
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_sync(queue, ^{
        NSLog(@"%@---------谈恋爱1年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_sync(queue, ^{
        NSLog(@"%@---------谈恋爱2年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_sync(queue, ^{
        NSLog(@"%@---------谈恋爱3年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_sync(queue, ^{
        NSLog(@"%@---------谈恋爱4年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
    dispatch_sync(queue, ^{
        NSLog(@"%@---------谈恋爱5年---------%d", [NSThread currentThread], [[NSThread currentThread] isMainThread]);
    });
}
```

至于 同步、串行，和直接执行代码没有区别。。。
