---
title:  "iOS进阶（二）数据库"
date:   2016-02-29 18:00:02 +8:00
categories: 
  - iOS
tags: 
  - Objective-C
---
> 在学习之前，首先要初步掌握SQL语言增删改查的使用。本文学习使用的数据库是SQLite。

Linux系统级的SQLite技术实现框架

- `Xcode6`中使用 `libsqlite3.0.dylib`
- `Xcode7`中使用 `libsqlite3.0.tbd`

## 一、添加sqlite.3.0.tbd

1. 选中SQL工程
2. 选中TARGETS中的SQL
3. 选中General标签
4. 将Lined Frameworks and Libraries前的小三角点开
5. 点击加号
6. 在搜索栏中输入sql
7. 选中libsqlite3.0.tbd(libsqlites3.0.dylib)添加

## 二、打开关闭数据库

首先创建一个DB类，继承自NSObject。

在.h文件中添加两个类方法

```objc
// 打开数据库
+ (sqlite3 *)open;

// 关闭数据库
+ (void)close;
```

在.m文件中创建一个数据库指针

```objc
// 创建一个数据库指针
static sqlite3 *db = nil;
```

实现打开数据库的方法

```objc
// 打开数据库
+ (sqlite3 *)open
{
    // 此方法的主要作用是打开数据库，准确的说是连接数据库
    // 返回值是一个数据库指针
    
    // 防止多次打开数据库
    if (db != nil) {
        return db;
    }
    
    // 获取Documents路径
    NSString *docPath = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject];
    // 获取数据库文件在沙盒中的路径
    NSString *sqlPath = [docPath stringByAppendingPathComponent:@"StuDB.sqlite"];
    // 获取数据库文件在包中的路径
    NSString *filePath = [[NSBundle mainBundle] pathForResource:@"StuDB.sqlite" ofType:nil];
    
    // 获取数据库管理类
    //NSFileManager *fileManager = [NSFileManager defaultManager];
    // 从包中将数据库拷贝到沙盒中
    //[fileManager copyItemAtPath:filePath toPath:sqlPath error:nil];
    
    // 如果数据库已经存在则打开数据库，如果数据库不存在，就创建一个数据库。
    // 第一个参数是数据库路径
    // 第二个参数是指向数据库指针的指针
    int result = sqlite3_open(sqlPath.UTF8String, &db);
    
    if (result == SQLITE_OK) {
        NSLog(@"数据库打开成功");
    } else {
        NSLog(@"数据库打开失败");
    }
    
    return db;
}
```

然后实现关闭数据库方法

```objc
// 关闭数据库
+ (void)close
{
    // 关闭数据库方法
    sqlite3_close(db);
    
    // 置空数据库指针
    db = nil;
}
```

> 注意，在关闭数据库时，一定要将数据库指针置空，否则下次就无法打开数据库。

## 三、创建表

新建一个Student类，继承自NSObject。

在头文件中引入DB.h

在.h文件中声明属性、初始化方法、构造器、创建表的类方法

```objc
@interface Student : NSObject

@property (nonatomic) int ID;
@property (copy, nonatomic) NSString *name;
@property (copy, nonatomic) NSString *gender;

- (instancetype)initWithID:(int)ID name:(NSString *)name gender:(NSString *)gender;

+ (instancetype)studentWithID:(int)ID name:(NSString *)name gender:(NSString *)gender;

+ (void)createTable;
```

实现创建表方法

```objc
- (void)createTable
{
    // 准备sql语句
    NSString *sqlString = @"create table if not exists stu (ID integer primary key, name text not null, gender text default "男");
    // 打开数据库
    sqlite3 *db = [DB open];
    // 执行sql语句
    int result = sqlite3_exec(db,sqlString.UTF8String, NULL, NULL, NULL);
   
    if (result == SQLITE_OK) {
        NSLog(@"建表成功");
    } else {
        NSLog(@"建表失败");
    }

    // 关闭数据库
    [DB close];
}
```

> 注意，在这里一定要打开数据库，然后等执行完毕后要关闭数据库。

## 四、增删改查

在Student.h文件中添加类方法的声明

```objc
// 获取所有Student数据
+ (NSArray *)allStudents;

// 根据指定ID，查找学生
+ (Student *)findStudentByID:(int)ID;

// 插入一条ID
+ (void)insertStudentWithID:(int)ID name:(NSString *)name gender:(NSString *)gender;

// 更新指定ID下的姓名和性别
+ (void)updateStudentName:(NSString *)name gender:(NSString *)gender forID:(int)ID;

// 根据ID删除学生
+ (void)deleteStudentByID:(int)ID;
```

在.m文件中实现方法

```objc
// 获取所有Student数据
+ (NSArray *)allStudents
{
    // 查询需要select语句
    // 不管对数据库进行什么操作，都需要连接数据库
    sqlite3 *db = [DB open];
    
    // 创建需要执行的sql语句
    NSString *sqlString = @"select * from Students";
    
    // 创建一个语句对象
    sqlite3_stmt *stmt = nil;
    
    // 此函数的作用是 生成一个语句对象，此时sql语句并没有执行，创建的语句对象保存了关联的数据库，执行的sql，语句的长度，这些信息。
    // 这是一个准备执行的语句
    int result = sqlite3_prepare_v2(db, sqlString.UTF8String, -1, &stmt, nil);
    
    // 创建一个可变数组储存模型
    NSMutableArray *mArr = nil;
    
    if (result == SQLITE_OK) {
        // 可变数组开辟空间
        mArr = [[NSMutableArray alloc] initWithCapacity:0];
        
        // SQLITE_ROW 仅用于查询语句，sqlite3_step() 函数执行后的结果如果是SQLITE_ROW，说明结果集里面还有数据，会自动跳转到下一条结果。如果已经是最后一条数据，再次执行sqlite3_step()，会返回SQLITE_DONE，结束整个查询过程。
        while (sqlite3_step(stmt) == SQLITE_ROW) {
            // 获取记录中的字段值
            // 第一个参数 是语句对象，第二个参数 是字段下标，从0开始。
            int ID = sqlite3_column_int(stmt, 0);
            NSString *name = [NSString stringWithUTF8String: (const char *)sqlite3_column_text(stmt, 1)];
            NSString *gender = [NSString stringWithUTF8String: (const char *)sqlite3_column_text(stmt, 2)];
            
            Student *student = [Student studentWithID:ID name:name gender:gender];
            [mArr addObject:student];
        }
        NSLog(@"查询所有数据成功");
    } else {
        NSLog(@"查询所有数据失败");
    }
    
    // 不管语句对象执行与否，释放语句对象
    sqlite3_finalize(stmt);

    [DB close];
    
    return mArr;
}

// 根据指定ID，查找学生
+ (Student *)findStudentByID:(int)ID
{
    // 打开数据库
    sqlite3 *db = [DB open];
    
    NSString *sqlString = @"select * from Students where ID = ?";
    
    sqlite3_stmt *stmt = nil;
    
    int result = sqlite3_prepare_v2(db, sqlString.UTF8String, -1, &stmt, nil);
    
    Student *stu = nil;
    
    if (result == SQLITE_OK) {
        // 如果查询语句或者其他sql语句有条件，在准备语句对象的函数内部，sql语句中用？来代替条件，那么在语句执行之前，一定要绑定。
        // 1代表sql语句中第一个问号，问号的下标是从1开始
        sqlite3_bind_int(stmt, 1, ID);
        while (sqlite3_step(stmt) == SQLITE_ROW) {
            // 获取记录中的字段信息
            NSString *name = [NSString stringWithUTF8String:(const char *)sqlite3_column_text(stmt, 1)];
            NSString *gender = [NSString stringWithUTF8String:(const char *)sqlite3_column_text(stmt, 2)];
            
            stu = [Student studentWithID:ID name:name gender:gender];
        }
        NSLog(@"获取成功");
    } else {
        NSLog(@"获取失败");
    }
    // 先释放语句对象
    sqlite3_finalize(stmt);

    [DB close];
    
    return stu;
}

// 插入一条ID
+ (void)insertStudentWithID:(int)ID name:(NSString *)name gender:(NSString *)gender
{
    sqlite3 *db = [DB open];
    
    NSString *sqlString = @"insert into Students values (?, ?, ?)";
    
    sqlite3_stmt *stmt = nil;
    
    int result = sqlite3_prepare(db, sqlString.UTF8String, -1, &stmt, nil);
    
    if (result == SQLITE_OK) {
        // 绑定
        sqlite3_bind_int(stmt, 1, ID);
        sqlite3_bind_text(stmt, 2, name.UTF8String, -1, nil);
        sqlite3_bind_text(stmt, 3, gender.UTF8String, -1, nil);
        
        // 执行语句
        sqlite3_step(stmt);
        NSLog(@"插入成功");
    } else {
        NSLog(@"插入失败");
    }
    // 释放语句对象
    sqlite3_finalize(stmt);

    [DB close];
}

// 更新指定ID下的姓名和性别
+ (void)updateStudentName:(NSString *)name gender:(NSString *)gender forID:(int)ID
{
    sqlite3 *db = [DB open];
    
    NSString *sqlString = @"update Students set name = ?, gender = ? where ID = ?";
    
    sqlite3_stmt *stmt = nil;
    
    int result = sqlite3_prepare(db, sqlString.UTF8String, -1, &stmt, nil);
    
    if (result == SQLITE_OK) {
        // 绑定
        sqlite3_bind_text(stmt, 1, name.UTF8String, -1, nil);
        sqlite3_bind_text(stmt, 2, gender.UTF8String, -1, nil);
        sqlite3_bind_int(stmt, 3, ID);
        
        sqlite3_step(stmt);
        NSLog(@"更新成功");
    } else {
        NSLog(@"更新失败");
    }
    
    sqlite3_finalize(stmt);

    [DB close];
}

// 根据ID删除学生
+ (void)deleteStudentByID:(int)ID
{
    sqlite3 *db = [DB open];
    
    NSString *sqlString = @"delete from Students where ID = ?";
    
    sqlite3_stmt *stmt = nil;
    
    int result = sqlite3_prepare(db, sqlString.UTF8String, -1, &stmt, nil);
    
    if (result == SQLITE_OK) {
        // 绑定
        sqlite3_bind_int(stmt, 1, ID);
        
        sqlite3_step(stmt);
        NSLog(@"删除成功");
    } else {
        NSLog(@"删除失败");
    }
    
    sqlite3_finalize(stmt);

    [DB close];
}
```
