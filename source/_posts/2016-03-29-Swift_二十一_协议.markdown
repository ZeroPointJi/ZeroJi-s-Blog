---
title:  "Swift (二十一) 扩展"
date:   2016-03-29 21:00:00 +8:00
categories: 
- iOS
tags: 
- Swift
---
## 协议

- 定义了一个蓝图, 规定了用来实现某一特定任务或者功能的方法 属性.
- 类 结构体或者枚举都可以采纳协议, 并为协议定义的这些要求提供具体实现.
- 某个类型能够满足某个协议的要求, 就可以说该类型"符合"这个协议.

## 协议语法

```swift
protocol SomeProtocol
{
    // 这里是协议的定义部分
}

struct SomeStructrue: FirstProtocol, AnotherProtocol // 在 : 后面接受协议
{

}

class SomeClass: SomeSuperClass, FisrtProtocol, AnotherProtocol // 拥有父类的类在接受协议时, 应该讲父类名放在协议名之前
{

}

## 属性要求

协议可以要求接受协议的类型提供特定名称和类型的实例属性或类型属性. 协议不指定属性是存储属性还是计算型属性, 它只指定属性的名称和类型. 此外, 协议还制定属性是可读的还是可读可写的.


protocol SomeProtocol
{
    var mustBeSettable: Int { get set  }
    var doesNotNeedToBeSettable: Int { get  }
}

protocol AnotherProtocol
{
    static var someTypeProperty: Int { get set  } // 定义类型属性时, 用 static 关键字
}

protocol FullyNamed
{
    var fullName: String { get  }
}

struct Person: FullyNamed
{
    var fullName: String
}
let john = Person(fullName: "John Appleseed")

class Starship: FullyNamed
{
    var prefix: String?
    var name: String
    init(name: String, prefix: String? = nil) {
        self.name = name
        self.prefix = prefix
    }
    var fullName: String {
        return (prefix != nil ? prefix! + " " : "") + name
    }
}
var ncc1701 = Starship(name: "Enterprise", prefix: "USS")
```

## 方法要求

```swift
protocol SomeProtocol
{
    static func someTypeMethod()
}

protocol RandomNumberGenerator
{
    func random() -> Double
}

class LinearCongruentialGenerator: RandomNumberGenerator
{
    var lastRandom = 42.0
    let m = 139968.0
    let a = 3877.0
    let c = 29573.0
    func random() -> Double {
        lastRandom = ((lastRandom * a + c) % m)
        return lastRandom / m
    }
}
let generator = LinearCongruentialGenerator()
print("Here's a random number: \(generator.random())")
print("And another one: \(generator.random())")
```

## Mutating 方法请求

```swift
protocol Togglable
{
    mutating func toggle()
}
enum OnOffSwitch: Togglable
{
    case Off, On
    mutating func toggle() {
        switch self {
        case .Off:
            self = .On
        case On:
            self = .Off
        }
    }
}
var lightSwitch = OnOffSwitch.Off
lightSwitch.toggle()
```

## 构造器要求在类中的实现

```swift
protocol SomeProtocol
{
    init()
}
class SomeSuperclass
{
    init() {
        // 这里是构造器的实现部分
    }
}
class SomeSubClass: SomeSuperclass, SomeProtocol
{
    // 因为接受协议, 需要加上 required
    // 因为继承自父类, 需要加上 override
    required override init() {
        // 这里是构造器的实现部分
    }
}
```

## 协议作为类型

尽管协议本身并未实现任何功能, 但是协议可以被当做一个成熟的类型来使用

```swift
class Dice
{
    let sides: Int
    let generator: RandomNumberGenerator // 表示接受了 RandomNumberGenerator 协议的类型的实例都可以赋值给 generator
    init(sides: Int, generator: RandomNumberGenerator) {
        self.sides = sides
        self.generator = generator
    }
    func roll() -> Int {
        return Int(generator.random() * Double(sides)) + 1
    }
}
var d6 = Dice(sides: 6, generator: LinearCongruentialGenerator())
for _ in 1...5 {
    print("Random dice roll is \(d6.roll())")
}
```

## 委托(代理)模式

```swift
protocol DiceGame
{
    var dice: Dice { get  }
    func play()
}
protocol DiceGamedelegate
{
    func gameDidStart(game: DiceGame)
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)
    func gameDidEnd(game: DiceGame)
}
class SnakesAndLadders: DiceGame
{
    let finalSquare = 25
    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())
    var square = 0
    var board: [Int]
    init() {
        board = [Int](count: finalSquare + 1, repeatedValue: 0)
        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02
        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08
   }
   var delegate: DiceGamedelegate?
   func play() {
        square = 0
        delegate?.gameDidEnd(self)
        gameLoop: while square != finalSquare {
            let diceRoll = dice.roll()
            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)
            switch square + diceRoll {
            case finalSquare:
                break gameLoop
            case let newSquare where newSquare > finalSquare:
                continue gameLoop
            default:
                square += diceRoll
                square += board[square]
            }
        }
        delegate?.gameDidEnd(self)
    }
}
class DiceGameTracker: DiceGamedelegate
{
    var numberOfTurns = 0
    func gameDidStart(game: DiceGame) {
        numberOfTurns = 0
        if game is SnakesAndLadders {
            print("Started a new game of Snackes and Ladders")
        }
        print("The is using a \(game.dice.sides)-sided dice")
    }
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {
        ++numberOfTurns
        print("Rolled a \(diceRoll)")
    }
    func gameDidEnd(game: DiceGame) {
        print("The game lasted for \(numberOfTurns) turns")
    }
}

let tracker = DiceGameTracker()
let game = SnakesAndLadders()
game.delegate = tracker
game.play()
```

## 通过扩展添加协议一致性

即便无法修改源代码, 依然可以通过扩展令一已有类型采纳并符合协议, 扩展可以为已有类型添加属性 方法 下标 以及 构造器, 因此可以符合协议中相应的要求.

```swift
protocol TextRepresentable
{
    var textualDescription: String { get  }
}

extension Dice: TextRepresentable
{
    var textualDescription: String {
        return "A \(sides)-sided dice"
    }
}
let d12 = Dice(sides: 12, generator: LinearCongruentialGenerator())
print(d12.textualDescription)

extension SnakesAndLadders: TextRepresentable
{
    var textualDescription: String {
        return "A game of snakes and Ladders with \(finalSquare) squares"
    }
}
print(game.textualDescription)
```

## 通过扩展采纳协议

当一个类型已经符合了某个协议中的所有要求, 却还没有声明采纳该协议时, 可以通过空扩展体的扩展来采纳该协议

```swift
struct Hamster
{
    var name: String
    var textualDescription: String {
        return "A hamster named \(name)"
    }
}
extension Hamster: TextRepresentable {}

let simonTheHamster = Hamster(name: "Simon")
let somethingTextRepresentable: TextRepresentable = simonTheHamster
print(somethingTextRepresentable.textualDescription)
```

## 协议类型的集合

协议类型可以爱数组或者字典这样的集合中使用

```swift
let things: [TextRepresentable] = [game, d12, simonTheHamster]
for thing in things { // thing 是 TextRepresentable 类型而不是 Dice, DiceGame, Hamster 等类型, 即时实例在幕后确实是这些类型中的一种. 由于 thing 是 TextRepresentable 类型, 任何 TextRepresentable  的实例都有一个 textRepresentable 属性, 所以在每次循环中可以安全地访问 thing.textRepresentable
    print(thing.textualDescription)
}
```

## 协议的继承

协议能够继承一个或多个其他协议, 可以在继承的协议的基础上添加新的要求.

```swift
protocol PrettyTextRepresentable: TextRepresentable
{
    var prettyTextualDescription: String { get  }

}
extension SnakesAndLadders: PrettyTextRepresentable
{
    var prettyTextualDescription: String {
        var output = textualDescription + ":\n"
        for index in 1...finalSquare {
            switch board[index] {
            case let ladder where ladder > 0:
                output += "▲ "
            case let snake where snake < 0:
                output += "▼ "
            default:
                output += "○ "
            }
            return output
        }
    }
}
print(game.prettyTextualDescription)>
```

## 类类型专属协议

通过添加 `class` 关键字来挟制协议只能被类类型采纳, 而结构体或枚举不能采纳该协议.

```swift
protocol SomeClassOnlyProtocol: class, SomeInheritedProtocol
{
    // 这里是类类型专属协议的定义部分
}
```

## 协议合成

```swift
protocol Named
{
    var name: String { get  }
}
protocol Aged
{
    var age: Int { get  }
}
struct Person: Named, Aged
{
    var name: String
    var age: Int
}
func wishHappyBirthday(celebrator: protocol<Named, Aged>)
{
    print("Happy birthday \(celebrator.name) - you're \(celebrator.age)!")
}
let birthdayPerson = Person(name: "Malcolm", age: 21)
wishHappyBirthday(birthdayPerson)
```

## 检查协议一致性

可以使用类型转换中的 `is` 和 `as` 操作符来检查协议的一致性

```swift
protocol HasArea
{
    var area: Double { get  }

}
class Circle: HasArea
{
    let pi = 3.1415927
    var radius: Double
    var area: Double { return pi * radius * radius  }
    init(radius: Double) { self.radius = radius  }
}
class Country: HasArea
{
    var area: Double
    init(area: Double) { self.area = area  }

}
class Animal
{
    var legs: Int
    init(legs: Int) { self.legs = legs  }
}
let objects: [AnyObject] = [
    Circle(radius: 2.0),
    Country(area: 243_610),
    Animal(legs: 4)
]
for object in objects {
    if let objectWithArea = object as? HasArea {
        print("Area is \(objectWithArea.area)")
    } else {
        print("Something that donesn't has an area")
    }
}
```

## 可选协议要求

协议可以定义可选要求, 采纳协议的类型可以选择是否实现这些要求

可选协议要求只能用在标记 `@objc` 特性的协议中

```swift
@objc protocol CounterDataSource
{
    optional func incrementForCount(count: Int) -> Int // 可选方法
    optional var fixedIncrement: Int { get  } // 可选属性
}
class Counter
{
    var count = 0
    var dataSource: CounterDataSource?
    func increment() {
        if let amount = dataSource?.incrementForCount?(count) {
            count += amount
        } else if let amount = dataSource?.fixedIncrement {
            count += amount
        }
    }
}

class ThreeSource: NSObject, CounterDataSource
{
    let fixedIncrement = 3
}
var counter = Counter()
counter.dataSource = ThreeSource()
for _ in 1...4 {
    counter.increment()
    print(counter.count)
}
@objc class TowardsZeroSource: NSObject, CounterDataSource
{
    func incrementForCount(count: Int) -> Int {
        if count == 0 {
            return 0
        } else if count < 0 {
            return 1
        } else {
            return -1
        }
    }
}
counter.count = -4
counter.dataSource = TowardsZeroSource()
for _ in 1...5 {
    counter.increment()
    print(counter.count)
}
```

## 协议扩展

```swift
extension RandomNumberGenerator
{
    func randomBool() -> Bool {
        return random() > 0.5
    }
}
let generator = LinearCongruentialGenerator()
print("Here's a random number: \(generator.random())")
print("And here's a random Boolean: \(generator.randomBool())")
```

## 提供默认实现

可以通过协议扩展来为协议要求的属性 方法 以及 下标提供默认的实现.

```swift
extension PrettyTextRepresentable
{
    var prettyTextualDescription: String {
        return textualDescription
    }
}
```

## 为协议扩展添加限制条件

```swift
extension CollectionType where Generator.Element: TextRepresentable {
    var textualDescription: String {
        let itemsAsText = self.map{ $0.textualDescription  }
        return "[" + itemsAsText.joinWithSeparator(",") + "]"
    }
}
let murrayTheHamster = Hamster(name: "Murray")
let morganTheHamster = Hamster(name: "Morgan")
let mauriceTheHamster = Hamster(name: "Maurice")
let hamsters = [murrayTheHamster, morganTheHamster, mauriceTheHamster]
print(hamsters.textualDescription)
```
