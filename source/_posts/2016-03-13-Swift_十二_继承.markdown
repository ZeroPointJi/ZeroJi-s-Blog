---
title:  "Swift (十二) 继承"
date:   2016-03-13 15:30:00 +8:00
categories: Swift
tags: [Swift]
---
## 定义一个基类

```swift
class Vehicle {
    var currentSpeed = 0.0
    var description {
        return "traveling at \(currentSpeed) miles per hour"
    }
    func makNoise() {
        // 什么也不做
    }
}
let someVehicle = Vehicle()
print("Vehicle: \(someVehicle.description")
```

## 子类生成

```swift
class Biycle: Bicycle: Vehicle {
    var hasBasket = false
}
let bicycle = Bicycle()
bicycle.hasBasket = true

bicycle.currentSpeed = 15.0
print("Bicycle: \(bicycle.description")

class Tandem: Bicycle {
    var currentNumberOfPassengers = 0
}
let tandem = Tandem()
tandem.hasBasket = true
tandem.currentNumberOfPassengers = 2
tandem.currentSpeed = 22.0
print("Tandem: \(tandem.description")
```

## 重写

重写关键字`override`, 表明是想提供一个重写版本,而非错误地提供了一个相同的定义

## 访问超类的方法,属性和下标

- 在方法`someMethod()`的重写实现中,可以通过`super.someMethod()`来调用超类版本的`someMethod()`方法
- 在属性`someProperty`的`getter`和`setter`的重写实现中,可以通过`super.someProperty`来访问超类版本的`someProperty`属性
- 在下标重写实现中,可以通过`supr[someIndex]`来访问超类版本中的相同下标

## 重写方法

```swift
class Train: Vehicle {
    override func makeNoise() {
        print("Choo Choo")
    }
}
let train = Train()
train.makeNoise()
```

## 重写属性

1.重写属性的`getter`和`setter`,无论继承来的属性是存储属性还是计算属性,子类只知道继承来的属性会有一个名字和类型

```swift
class Car: Vehicle {
    var gear = 1
    override var description: String {
        return super.description + "in gear \(gear)"
    }
}
let car = Car()
car.currentSpeed = 25.0
car.gear = 3
print("Car: \(car.description")
```

2.重写属性观察器

```swift
class AutomaticCar: Car {
    override var currentSpeed: Double {
        didSet {
            gear = Int(currentSpeed / 10.0) + 1
        }
    } 
}
let automatic = AutomaticCar()
automatic.currentSpeed = 35.0
print("AutomaticCar: \(automatic.description")
```
