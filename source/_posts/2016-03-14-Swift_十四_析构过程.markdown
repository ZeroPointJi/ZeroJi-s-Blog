---
title:  "Swift (十四) 析构过程"
date:   2016-03-14 09:40:00 +8:00
categories: Swift
tags: [Swift]
---
## 析构过程原理

析构器只使用于类类型,当一个类的实例被释放之前,析构器会被立即调用.

```swift
class Deinit {
    deinit { // 固定方法
        // 执行析构过程
    }
}
```

// 析构器实践

```swift
class Bank {
    static var coinsInBank = 10_000
        static func venCoins(var numberOfCoinsToVend: Int) -> Int {
            numberOfCoinsToVend = min(numberOfCoinsToVend, coinsInBank)
            coinsInBank -= numberOfCoinsToVend
            return numberOfCoinsToVend
        }
    static func receiverCoins(coins: Int) {
        coinsInBank += coins
    }
}
class Player {
    var coinsInPurse: Int
    init(coins: Int) {
        coinsInPurse = Bank.vendCoins(coins)
    }
    func winCoins(coins: Int) {
        coinInpurse += Bank.venCoins(coins)
    }
    deinit {
        Bank.receiverCoins(coinsInPurse)
    }
}
var playerOne: Player? = Player(coins:100)
print("A new player has joined the game with \(playerOne!.coinsInPurse) conins")
print("There are now \(Bank.coinsInBank) coins left in the bank")

playerOne!.winCoins(2_000)
print("PlayerOne won 2000 coins & now has \(playerOne!.coinsInPurse) coins")
print("The bank now only has \(Bank.coinsInBank) coins left")

playerOne = nil
print("PlayerOne has left the game")
print("The bank now has \(Bank.coinsInBank) coins")
```

