---
title:  "Swift (二十) 扩展"
date:   2016-03-23 21:00:00 +8:00
categories: Swift
tags: [Swift]
---
## 扩展语法

使用关键字 `extension` 来声明扩展

```swift
extension SomeType {
    // 为 SomeType 添加的新功能
}
extension Sometype: SomeProtocol, AnotherProctocol {
    // 协议实现
}
```

## 计算型属性

```swift
extension Double {
    var km: Double { return self * 1_000.0  }
    var m: Double { return self  }
    var cm: Double { return self / 100.0  }
    var mm: Double { return self / 1_000.0  }
    var ft: Double { return self / 3.28084  }
}
let oneInch = 25.4.mm
print("One inch is \(oneInch) meters")
let threeFeet = 3.ft
print("Three feet is \(threeFeet) meters")
```

## 构造器

```swift
struct Size
{
    var width = 0.0, height = 0.0
}
struct Point
{
    var x = 0.0, y = 0.0
}
struct Rect
{
    var origin = Point()
    var size = Size()
}

let defaultRect = Rect()
let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0), size: Size(width: 5.0, height: 5.0))

extension Rect
{
    init(center: Point, size: Size) {
        let originX = center.x - (size.width / 2)
        let originY = center.y - (size.height / 2)
        self.init(origin: Point(x: originX, y: originY), size: size)
    }
}

let centerRect = Rect(center: Point(x: 4.0, y: 4.0), size: Size(width: 3.0, height: 3.0))
```

## 方法

```swift
extension Int
{
    func repetitions(task: () -> Void) {
        for _ in 0..<self {
            task()
        }
    }
}
            
3.repetitions { () -> Void in
    print("Hello!")
}
```

// 可变实例方法

```swift
extension Int 
{
    mutationg func square() {
        self = self * self
    }
}
var someInt = 3
someInt.square()
```

## 下标

这个例子为 `Swift` 内建类型 `Int` 添加了一个整型下标. 这个下标 `[n]` 返回十进制数字从右向左数的第 `n` 个数字

```swift
extension Int
{
    subscript(var digitIndex: Int) -> Int {
        var decimalBase = 1
        while digitIndex > 0 {
            decimalBase *= 10
            --digitIndex
        }
        return (self / decimalBase) % 10
    }
}
7412341234[0]
```

## 嵌套类型

```swift
extension Int
{
    enum Kind {
        case Negative, Zero, Positive
    }
    var kind: Kind {
        switch self {
        case 0:
            return .Zero
        case let x where x > 0:
            return .Positive
        default:
            return .Negative
        }
    }
}
func printIntegerKinds(numbers: [Int])
{
    for number in numbers {
        switch number.kind {
        case .Negative:
            print("- ", terminator: "")
        case .Zero:
            print("0 ", terminator: "")
        case .Positive:
            print("+ ", terminator: "")
        }
    }
    print("")
}
printIntegerKinds([3, 19, -27, 0, -6, 0, 7])
```
