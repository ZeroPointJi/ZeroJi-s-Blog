---
title:  "Swift (二十三) 访问控制"
date:   2016-04-03 13:55:00 +8:00
categories: Swift
tags: [Swift]
---
## 访问控制

- 访问控制可以限定其他源文件或模块中的代码对你的代码的访问级别. 这个特性可以让我们隐藏代码的一些实现细节, 并且可以为其他人可以访问和使用的代码提供接口.
- 你可以明确地给单个类型(类 结构体 枚举)设置访问级别, 也可以给这些类型的属性 方法 构造器 下标等设置访问级别, 协议也可以被限定在一定的访问内使用, 包括协议里的全局常量 变量和函数.
- `Swift` 不仅提供了多种不同的访问级别, 还为某些典型场景提供了默认的访问级别, 这样就不需要我们在每段代码中都声明显式访问级别.

## 模块和源文件

模块指的是独立的代码单元, 框架或应用程序会作为一个独立的模块来构建和发布.

`Swift` 中, `Xcode` 的每个 `target` 都被当做独立的模块处理.

如果是为了实现某个通用的功能, 或者是为了封装一些常用方法而将代码打包成独立的框架, 这个框架就是 `Swift` 中的一个模块. 当它被导入到某个应用程序或者其他框架时, 矿建内容都将属于这个独立的模块.

源文件是 `Swift` 中国的源文件, 它通常属于一个模块, 即一个应用程序或者框架.

## 访问级别

`Swift` 为代码中的实体提供了三种不同的访问级别.

- `public`: 可以访问同一模块文件中的任何实体, 在模块外也可以通过导入该模块来访问源文件里的所有实体. 
- `internal`: 可以访问同一模块源文件中的任何实体, 但是不能从模块外访问该模块源文件中的实体. 
- `private`: 限制实体只能在所在的源文件内部使用.

## 访问级别基本原则

`Swift` 中的访问级别遵循一个基本原则: 不可以在某个实体中定义访问级别更高的实体.

一个 `public` 访问级别的变量, 其类型的访问级别不能是 `internal` 或 `private`. 因为无法保证变量的类型在使用变量的地方也具有访问权限.

函数的访问级别不能高于它的参数类型和返回类型的访问级别.

## 默认访问级别

如果不为代码的实体显式指定访问级别, 那么它们默认为 `internal` 级别.

## 单 target 应用程序的访问级别

当编写一个单 `target` 应用程序时, 应用的所有功能都是为该应用服务, 而不需要提供给其他应用或者模块使用, 所以我们不需要明确设置访问级别, 使用默认的访问级别 `internal` 即可.

## 框架的访问级别

当开发框架时, 就需要把一些对外的接口定义为 `public` 级别, 以便使用者导入该框架后可以正常使用其功能. 这些被定义为 `public` 的接口, 就是这个框架的 `API`.

## 党员测试 target 的访问级别

当应用程序包含单元测试 `target` 时, 为了测试, 测试模块需要访问应用程序模块中的代码. 默认情况下只有 `public` 级别的实体才可能被其他模块访问. 而且, 如果在导入应用程序模块的语句前面使用 `@testable` 特性, 然后在允许测试的编辑设置 (`Build Options` -> `Enable Testability`) 下编译这个应用程序模块, 单元测试 `target` 就可以访问应用程序模块中所有 `internal` 级别的实体. 

## 访问控制语法

`public` `internal` `private` 来声明实体的访问级别.

```swift
public class SomePublicClass {}
class SomeInternalClass {} // 除非专门制定, 否则实体默认访问级别为 internal
private class SomePrivateClass {}

public var somePublicVariable = 0
var someInternalConstant = 0
private func somePrivateFunction() {}
```

## 自定义类型

如果像为一个自定义类型制定访问级别, 在定义类型时进行制定即可.

一个类型的访问级别也会影响到类型成员的默认访问级别, 如果将类型指定类 `private` 级别, 那么该类型的所有成员的默认访问级别也会变成 `private`.

一个 `public` 类型的所有成员的访问级别默认为 `internal` 级别, 而不是 `public` 类型.

```swift
public class SomePublicClass // 显式的 public 类
{
    public var somePublicProperty = 0 // 显式的 public 类成员
    var someInternalProperty = 0 // 隐式的 internal 类成员
    private func somePrivateMethod() {} // 显式的 private 类成员
}
class SomeInternalClass // 隐式的 internal 类
{
    var someInternalProperty = 0 // 隐式的 internal 类成员
    private func somePrivateMethod() {} // 显式的 private 类成员
}
private class SomePrivateClass // 显示的 private 类
{
    var somePrivateProperty = 0 // 隐式的 private 类成员
    func somePrivateMethod() {} // 隐式的 private 类成员
}
```

## 元组类型

元组的访问级别将由元组中访问级别最严格的类型来决定

## 函数类型

函数的访问级别根据访问级别最严格的参数类型或返回类型的访问级别来决定. 但是, 如果这种访问级别不符合函数定义所在环境的默认访问级别, 那么就需要明确地指定该函数的访问类型

```swift
func someFunction() -> (SomeInternalClass, SomePrivateClass)
{
    // 此处是函数实现部分
}

private func someFunction() -> (SomeInternalClass, SomePrivateClass)
{
    // 此处是函数实现部分
}
```

## 枚举类型

枚举成员的访问级别和该枚举类型相同, 你不能为枚举成员单独指定不同的访问级别.

枚举定义中的任何原始值或关联值的访问级别至少不能低于该枚举类型的访问级别. 例如, 不能在一个 `internal` 访问级别的枚举中定义 `private` 级别的原始值类型.

```swift
public enum CompassPoint
{
    case North
    case Sourth
    case East
    case West
}
```

## 嵌套类型

- 如果在 `private` 级别的类型中定义嵌套类型, 那么该嵌套类型就自动拥有 `private` 访问级别.
- 如果在 `public` 或者 `internal` 级别的类型中定义嵌套类型, 那么该嵌套类型自动拥有 `internal` 访问级别.

## 子类

子类的访问级别不得高于父类的访问级别. 例如, 父类的访问级别是 `internal`, 子类的访问级别不能是 `public` .

可以通过重写为继承来的类成员提供更高的访问级别.

```swift
public class A
{
    private func someMethod() {}
}
internal class B: A
{
    override internal func someMethod() {}
}

public class A
{
    private func someMethod() {}
}
internal class B: A
{
    override internal func someMethod() {
        super.someMethod()
    }
}
```

## 常量 变量 属性 下标

常量 变量 属性 不能拥有比它们类型更高的访问级别.

```swift
private var privateInstance = SomePrivateClass()
```

## Getter 和 Setter

```swift
struct TrackedString
{
    private(set) var numberOfEdites = 0 // Setter 的访问级别可以低于对应的 Getter 的访问级别, 这样就可以公职变量 属性或下标的读写权限
    var value: String = "" {
        didSet {
            numberOfEdites++
        }
    }
}

public struct TranckedString
{
    public private(set) var numberOfEdits = 0 // 可以在必要时为 Getter 和 Setter 显式指定访问级别.
    public var value: String = "" {
        didSet {
            numberOfEdits++
        }
    }
    public init() {}
}
```

## 构造器

- 自定义构造器的访问级别可以低于或等于其所属类型的访问级别
- 唯一例外的是必要构造器, 它的访问级别必须和所属类型的访问级别相同.
- 如同函数或访问的参数, 构造器参数的访问权限也不能低于构造器本身的访问级别.

## 默认构造器

默认构造器的访问级别与所属类型的访问级别相同, 除非类型的访问级别是 `public`

## 构造体默认的成员逐一构造器

如果构造体中任意储存性属性的访问级别为 `private` , 那么该构造体默认的成员逐一构造器的访问级别就是 `private`. 否则, 这种构造器的访问级别依然是 `internal` 

## 协议

如果定义了一个集成自其它协议的新协议, 那么新协议拥有的访问级别最高也只能和被集成协议的访问级别相同.

## 协议一致性

- 一个协议可以采纳比自身访问级别低的协议.
- 采纳了协议的类型的访问级别取它本身和所采纳协议两者间最低的访问级别.
- 如果采纳了协议, 那么实现了协议的所有要求后, 必须确保这些实现的访问级别不能低于协议的访问级别.

## 扩张

- 可以在访问级别允许的情况下对类 结构体 枚举进行扩展.
- 扩展成员具有和原始类型成员一致的访问类型.
- 可以明确指定扩展的访问级别, 从而给该扩展中的所有成员指定一个新的默认访问级别. 这个新的访问级别仍然可以被单独指定的访问级别所覆盖.

## 通过扩展添加协议一致性

如果通过扩展来采纳协议, 那么就不能显式指定该扩展的访问级别, 协议拥有相应的访问级别, 并会为该扩展中所有协议要求的实现提供默认的访问级别.

## 泛型

泛型类型或泛型函数的访问级别取决于泛型类型或泛型函数本身的访问级别, 还需要结合类型参数的类型约束的访问级别, 根据这些访问级别中的最低访问级别来确定.

## 类型别名

定义的任何类型别名都会被当做不同的类型.

类型别名的访问级别不可高于其表现类型的访问级别.
