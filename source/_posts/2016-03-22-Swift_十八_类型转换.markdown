---
title:  "Swift (十八) 类型转换"
date:   2016-03-22 20:10:00 +8:00
categories: 
- iOS
tags: 
- Swift
---
## 定义一个类层次作为例子

```swift
class MediaItem
{
    var name: String
    init(name: String) {
        self.name = name
    }
}
class Movie: MediaItem
{
    var director: String
    init(name: String, director: String) {
        self.director = director
        super.init(name: name)
    }
}
class Song: MediaItem
{
    var artist: String
    init(name: String, artist: String) {
        self.artist = artist
        super.init(name: name)
    }
}

let library = [
    Movie(name: "Casablanca", director: "Michael Curtiz"),
    Song(name: "Blue Suede Shoes", artist: "Elvis Presley"),
    Movie(name: "Citizen Kane", director: "Orson Welles"),
    Song(name: "The One And Only", artist: "Chesney Hawkes"),
    Song(name: "Never Gonna Give You Up", artist: "Rick Astley")
] // 数组 library 的类型被腿短类 [MediaItem]
```

## 检查类型
`is` 被用来检查一个类型是否属于特定子类型

```swift
var movieCount = 0
var songCount = 0

for item in library {
    if item is Movie {
        ++movieCount
    } else if item is Song {
        ++songCount
    }
}
print("Media library contains \(movieCount) movies and \(songCount) songs")
```

## 向下转型
某类型的一个常量和变量可能在幕后实际上是一个子类, 当确定是这种情况时, 你可以尝试向下转到它的子类型, 用类型转换操作符 `as?` 或 `as!`

```swift
for item in library {
    if let movie = item as? Movie {
        print("Movie: '\(movie.name), dir. \(movie.director)")
    } else if let song = item as? Song {
        print("Song: '\(song.name), by \(song.artist)")
    }
}
```

## Any 和 AnyObject

- `AnyObject` 可以表示任何类类型的实例
- `Any 可以表示任何类型, 包括函数类型`

```swift
let someObject: [AnyObject] = [
    Movie(name: "2001: A Space Odyssey", director: "Stanley Kubrick"),
    Movie(name: "Moon", director: "Duncan Jones"),
    Movie(name: "Alien", director: "Ridley scott")
]
for object in someObject {
    let movie = object as! Movie
    print("Movie: '\(movie.name)', dir. \(movie.director)")
}

var things = [Any]()

things.append(0)
things.append(0.0)
things.append(42)
things.append(3.14159)
things.append("hello")
things.append((3.0, 5.0))
things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))
things.append({ (name: String) -> String in "Hello, \(name)" } )

for thing in things {
    switch thing {
    case 0 as Int:
        print("zero as an Int")
    case 0 as Double:
        print("zero as a Double")
    case let someInt as Int:
        print("an integer value of \(someInt)")
    case let someDouble as Double where someDouble > 0:
        print("a positive double value of \(someDouble)")
    case is Double:
        print("some other double value that I don't want to print")
    case let someString as String:
        print("a string value of \"\(someString)\"")
    case let (x, y) as (Double, Double):
        print("an (x, y) point at \(x), \(y)")
    case let movie as Movie:
        print("a movie called '\(movie.name)', dir. \(movie.director)'")
    case let stringConverter as String -> String:
        print(stringConverter("Michael"))
    default:
        print("something else")
    }
}
```
